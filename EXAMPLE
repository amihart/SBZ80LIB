'Initialize.
option strict
acls
'Load the library.
exec "PRG3:SBZ80.LIB"
'Define our callback functions.
var stdin$ = ""
var itimer% = millisec
common def PORT_OUT PORT%, VALUE%
  if PORT% == 0 then
    print chr$(VALUE%);
  endif
end
common def PORT_IN(PORT%)
  if PORT% == 0 THEN
    if len(stdin$) == 0 then
      input stdin$
      push stdin$, chr$(10)
    endif
    var ret% = asc(stdin$[0])
    stdin$ = right$(stdin$, len(stdin$) - 1)
    return ret%
  endif
  return 0
end
common def INTERRUPT MODE% out FIRE%, VALUE%
  VALUE% = 0
  var ntimer% = millisec
  if MODE% == 1 && (ntimer% - itimer%) > 150 then
    itimer% = ntimer%
    FIRE% = 1
  else
    FIRE% = 0
  endif
end
'Inform the interpreter.
emupocb "PORT_OUT"
emupicb "PORT_IN"
emuintcb "INTERRUPT"
'Example menu.
var choice$
@beginning
color #white
choice$ = ""
'Get user choice.
while choice$ != "1" && choice$ != "2"
  print "Which example to load?"
  print " 1) File assembled from EXAMPLE.ASM by the assembler Z80ASM"
  print " 2) File compiled from EXAMPLE.C by the compiler SDCC"
  print " 3) Exit"
  input choice$
  if choice$ == "3" then
    stop
  endif
  if choice$ != "1" && choice$ != "2" then
    color #red
    print "Invalid choice."
    color #white
    print "Press any key to continue . . ."
    while len(inkey$()) > 0:wend
    while len(inkey$()) == 0:wend
    cls
  endif
wend
'Load the example program.
if choice$ == "1" then
  emuload 0, "EXAMPLE.HEX"
else
  emuload 0, "EXAMPLE_C.HEX"
endif
'Run the example program.
emurun 0
'Finish up
color #lime
print "Demonstration complete."
color #white
print "Press any key to continue . . ."
while len(inkey$()) > 0:wend
while len(inkey$()) == 0:wend
cls
goto @beginning
